package yxinfo.core.service.sms.dao.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.util.CollectionUtils;
import yxinfo.core.framework.service.dal.Page;
import yxinfo.core.framework.service.dal.dao.AbstractModel;

public class EvtVcodeNumExample extends AbstractModel {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected Page page;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public EvtVcodeNumExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public void setPage(Page page) {
        this.page=page;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public Page getPage() {
        return page;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andMobileIsNull() {
            addCriterion("mobile is null");
            return (Criteria) this;
        }

        public Criteria andMobileIsNotNull() {
            addCriterion("mobile is not null");
            return (Criteria) this;
        }

        public Criteria andMobileEqualTo(String value) {
            addCriterion("mobile =", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileNotEqualTo(String value) {
            addCriterion("mobile <>", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileGreaterThan(String value) {
            addCriterion("mobile >", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileGreaterThanOrEqualTo(String value) {
            addCriterion("mobile >=", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileLessThan(String value) {
            addCriterion("mobile <", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileLessThanOrEqualTo(String value) {
            addCriterion("mobile <=", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileLike(String value) {
            addCriterion("mobile like", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileNotLike(String value) {
            addCriterion("mobile not like", value, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileIn(List<String> values) {
            addCriterion("mobile in", values, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileNotIn(List<String> values) {
            addCriterion("mobile not in", values, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileBetween(String value1, String value2) {
            addCriterion("mobile between", value1, value2, "mobile");
            return (Criteria) this;
        }

        public Criteria andMobileNotBetween(String value1, String value2) {
            addCriterion("mobile not between", value1, value2, "mobile");
            return (Criteria) this;
        }

        public Criteria andNumIsNull() {
            addCriterion("num is null");
            return (Criteria) this;
        }

        public Criteria andNumIsNotNull() {
            addCriterion("num is not null");
            return (Criteria) this;
        }

        public Criteria andNumEqualTo(Integer value) {
            addCriterion("num =", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumNotEqualTo(Integer value) {
            addCriterion("num <>", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumGreaterThan(Integer value) {
            addCriterion("num >", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("num >=", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumLessThan(Integer value) {
            addCriterion("num <", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumLessThanOrEqualTo(Integer value) {
            addCriterion("num <=", value, "num");
            return (Criteria) this;
        }

        public Criteria andNumIn(List<Integer> values) {
            addCriterion("num in", values, "num");
            return (Criteria) this;
        }

        public Criteria andNumNotIn(List<Integer> values) {
            addCriterion("num not in", values, "num");
            return (Criteria) this;
        }

        public Criteria andNumBetween(Integer value1, Integer value2) {
            addCriterion("num between", value1, value2, "num");
            return (Criteria) this;
        }

        public Criteria andNumNotBetween(Integer value1, Integer value2) {
            addCriterion("num not between", value1, value2, "num");
            return (Criteria) this;
        }

        public Criteria andFlagAtIsNull() {
            addCriterion("flag_at is null");
            return (Criteria) this;
        }

        public Criteria andFlagAtIsNotNull() {
            addCriterion("flag_at is not null");
            return (Criteria) this;
        }

        public Criteria andFlagAtEqualTo(Date value) {
            addCriterion("flag_at =", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtNotEqualTo(Date value) {
            addCriterion("flag_at <>", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtGreaterThan(Date value) {
            addCriterion("flag_at >", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtGreaterThanOrEqualTo(Date value) {
            addCriterion("flag_at >=", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtLessThan(Date value) {
            addCriterion("flag_at <", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtLessThanOrEqualTo(Date value) {
            addCriterion("flag_at <=", value, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtIn(List<Date> values) {
            addCriterion("flag_at in", values, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtNotIn(List<Date> values) {
            addCriterion("flag_at not in", values, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtBetween(Date value1, Date value2) {
            addCriterion("flag_at between", value1, value2, "flagAt");
            return (Criteria) this;
        }

        public Criteria andFlagAtNotBetween(Date value1, Date value2) {
            addCriterion("flag_at not between", value1, value2, "flagAt");
            return (Criteria) this;
        }

        private Object getStr(Object obj) {
            if ( obj != null && ( obj == "" || obj instanceof String ) ) {

                StringBuilder sb = new StringBuilder();
                sb.append( "\'" ).append( obj.toString() ).append( "\'" );
                return sb.toString();
                
            } else {
                return obj;
            }
        }

        private String getKeyValue(Criterion criterion) {
            StringBuffer sb = new StringBuffer();
            if ( criterion.isNoValue() ) {
                // 无值 is not null etc....
                sb.append( criterion.getCondition() );
            } else if ( criterion.isSingleValue() ) {
                // 单值 id = 4
                sb.append( criterion.getCondition() ).append( " " ).append( getStr( criterion.getValue() ) );
            } else if ( criterion.betweenValue ) {
                // 双值 between 1 and 2
                sb.append( criterion.getCondition() )
                        .append( " " ).append( getStr( criterion.getValue() ) )
                        .append( " and " ).append( getStr( criterion.getSecondValue() ) );
            } else if ( criterion.listValue ) {
                // 多值 in ( 1,2 )
                List<Object> inClause = (List<Object>) criterion.getValue();

                if ( !CollectionUtils.isEmpty( inClause ) ) {

                    sb.append( criterion.getCondition() ).append( " ( " );
                    for ( int i = 0; i < inClause.size(); i++ ) {
                        if ( i == inClause.size() - 1 ) {
                            sb.append( getStr( inClause.get( i ) ) ).append( " ) " );
                        } else {

                            sb.append( getStr( inClause.get( i ) ) ).append( " , " );
                        }
                    }
                }

            }

            return sb.toString();
        }

        public Criteria addMutiOrClause(Criteria addMutiOrClause) {
            StringBuffer sb = new StringBuffer();

            List<Criterion> orList = addMutiOrClause.getCriteria();
            if ( !CollectionUtils.isEmpty( orList ) ) {

                sb.append( "( " );
                for ( int i = 0; i< orList.size(); i++ ) {

                    if ( i == addMutiOrClause.getCriteria().size() - 1 ) {
                        sb.append( getKeyValue( orList.get( i ) ) ).append( " )" );

                    } else {
                        sb.append( getKeyValue( orList.get( i ) ) ).append( " or " );
                    }

                }
            }

            addCriterion( sb.toString() );

            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table evt_vcode_num
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table evt_vcode_num
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}